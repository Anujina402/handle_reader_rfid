import java.nio.file.FileVisitResult
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.SimpleFileVisitor
import java.nio.file.attribute.BasicFileAttributes
import java.util.Locale
import org.gradle.api.GradleException
import org.gradle.api.tasks.Delete

plugins {
    id 'com.android.application'
}

android {
    namespace 'com.pda.uhf_g'
    compileSdk 34
    defaultConfig {
        applicationId "com.pda.uhf_g"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 36
        versionName "3.6"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            output.outputFileName = "uhfg_v${variant.versionName}.apk"
        }
    }
    buildTypes {
        debug {
            buildConfigField("String", "BUILD_TIME", getDate())
        }
        release {
            buildConfigField("String", "BUILD_TIME", getDate())
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def isWindows = System.getProperty("os.name").toLowerCase(Locale.US).contains("win")

if (isWindows) {
    def deleteDirectoryWithRetry = { Path directory, int maxAttempts, long baseDelayMillis, logger ->
        for (int attempt = 1; attempt <= maxAttempts; attempt++) {
            if (!Files.exists(directory)) {
                return
            }
            try {
                Files.walkFileTree(directory, new SimpleFileVisitor<Path>() {
                    @Override
                    FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                        Files.deleteIfExists(file)
                        return FileVisitResult.CONTINUE
                    }

                    @Override
                    FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                        if (exc != null) {
                            throw exc
                        }
                        Files.deleteIfExists(dir)
                        return FileVisitResult.CONTINUE
                    }
                })
                return
            } catch (IOException ex) {
                if (attempt == maxAttempts) {
                    throw new GradleException("Unable to delete ${directory} after ${maxAttempts} attempts", ex)
                }
                logger.warn("Attempt ${attempt} to delete ${directory} failed: ${ex.message}. Retrying...")
                System.gc()
                try {
                    Thread.sleep(baseDelayMillis * attempt)
                } catch (InterruptedException interruptedException) {
                    Thread.currentThread().interrupt()
                    throw new GradleException("Interrupted while waiting to retry deleting ${directory}", interruptedException)
                }
            }
        }
        if (Files.exists(directory)) {
            throw new GradleException("Unable to delete ${directory} despite retry attempts.")
        }
    }

    tasks.named("clean", Delete).configure { deleteTask ->
        doFirst {
            Path buildDirPath = project.layout.buildDirectory.asFile.get().toPath()
            if (Files.exists(buildDirPath)) {
                deleteDirectoryWithRetry(buildDirPath, 5, 200L, logger)
            }
        }
    }
}

configurations.configureEach {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'org.jetbrains.kotlin' &&
                details.requested.name.startsWith('kotlin-stdlib')) {
            details.useVersion('1.8.10')
            details.because('Align Kotlin stdlib artifacts to a single version to avoid duplicate classes')
        }
    }
    resolutionStrategy.dependencySubstitution {
        substitute module('org.jetbrains.kotlin:kotlin-stdlib-jdk7') using module('org.jetbrains.kotlin:kotlin-stdlib:1.8.10')
        substitute module('org.jetbrains.kotlin:kotlin-stdlib-jdk8') using module('org.jetbrains.kotlin:kotlin-stdlib:1.8.10')
    }
}


static String getDate() {
    Date date = new Date()
    return "\"" + date.format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("GMT+08:00")) + "\""
}

dependencies {
    implementation platform('org.jetbrains.kotlin:kotlin-bom:1.8.10')
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment:2.7.7'
    implementation 'androidx.navigation:navigation-ui:2.7.7'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.jakewharton:butterknife:10.2.3'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'
    implementation 'net.sourceforge.jexcelapi:jxl:2.6.12'
    testImplementation 'junit:junit:4.13.2'

}